{"ast":null,"code":"export default {\n  data() {\n    return {\n      form: {\n        contact: '',\n        address: '',\n        brand: '',\n        type: '',\n        condition: '',\n        color: ''\n      }\n    };\n  },\n  methods: {\n    querySearch(query) {\n      // 在此处使用高德地图的地点搜索功能，根据query获取匹配的地址列表\n      // 返回一个Promise对象，解析为包含地址列表的数组\n      // 示例中使用了一个静态的地址列表来模拟搜索结果\n      const results = ['北京市朝阳区', '北京市海淀区', '上海市黄浦区', '上海市静安区', '广州市天河区', '广州市海珠区', '深圳市福田区', '深圳市南山区'];\n      return new Promise(resolve => {\n        const suggestions = results.filter(item => item.includes(query));\n        resolve(suggestions);\n      });\n    },\n    handleSelect(item) {\n      // 选中地址后的处理逻辑\n      this.form.address = item;\n    },\n    submitForm() {\n      // 在此处添加提交订单的逻辑，例如发送网络请求等\n      console.log('提交订单', this.form);\n      // 清空表单\n      this.form = {\n        contact: '',\n        address: '',\n        brand: '',\n        type: '',\n        condition: '',\n        color: ''\n      };\n    }\n  }\n};","map":{"version":3,"names":["data","form","contact","address","brand","type","condition","color","methods","querySearch","query","results","Promise","resolve","suggestions","filter","item","includes","handleSelect","submitForm","console","log"],"sources":["src/components/SubOrder.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card>\r\n      <div slot=\"header\" class=\"card-header\">发布订单</div>\r\n      <el-form :model=\"form\" label-width=\"100px\">\r\n        <el-form-item label=\"卖家联系方式\">\r\n          <el-input v-model=\"form.contact\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"卖家地址\">\r\n          <el-autocomplete v-model=\"form.address\" :fetch-suggestions=\"querySearch\" placeholder=\"请输入地址\" @select=\"handleSelect\"></el-autocomplete>\r\n        </el-form-item>\r\n        <el-form-item label=\"车辆品牌\">\r\n          <el-input v-model=\"form.brand\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"车辆类型\">\r\n          <el-input v-model=\"form.type\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"车况\">\r\n          <el-input v-model=\"form.condition\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"车辆颜色\">\r\n          <el-input v-model=\"form.color\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\">提交订单</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      form: {\r\n        contact: '',\r\n        address: '',\r\n        brand: '',\r\n        type: '',\r\n        condition: '',\r\n        color: ''\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    querySearch(query) {\r\n      // 在此处使用高德地图的地点搜索功能，根据query获取匹配的地址列表\r\n      // 返回一个Promise对象，解析为包含地址列表的数组\r\n      // 示例中使用了一个静态的地址列表来模拟搜索结果\r\n      const results = [\r\n        '北京市朝阳区',\r\n        '北京市海淀区',\r\n        '上海市黄浦区',\r\n        '上海市静安区',\r\n        '广州市天河区',\r\n        '广州市海珠区',\r\n        '深圳市福田区',\r\n        '深圳市南山区'\r\n      ];\r\n      return new Promise(resolve => {\r\n        const suggestions = results.filter(item => item.includes(query));\r\n        resolve(suggestions);\r\n      });\r\n    },\r\n    handleSelect(item) {\r\n      // 选中地址后的处理逻辑\r\n      this.form.address = item;\r\n    },\r\n    submitForm() {\r\n      // 在此处添加提交订单的逻辑，例如发送网络请求等\r\n      console.log('提交订单', this.form);\r\n      // 清空表单\r\n      this.form = {\r\n        contact: '',\r\n        address: '',\r\n        brand: '',\r\n        type: '',\r\n        condition: '',\r\n        color: ''\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card-header {\r\n  background-color: #f5f7fa;\r\n  padding: 15px;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n</style>\r\n"],"mappings":"AAgCA;EACAA,KAAA;IACA;MACAC,IAAA;QACAC,OAAA;QACAC,OAAA;QACAC,KAAA;QACAC,IAAA;QACAC,SAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,YAAAC,KAAA;MACA;MACA;MACA;MACA,MAAAC,OAAA,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SACA;MACA,WAAAC,OAAA,CAAAC,OAAA;QACA,MAAAC,WAAA,GAAAH,OAAA,CAAAI,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,QAAA,CAAAP,KAAA;QACAG,OAAA,CAAAC,WAAA;MACA;IACA;IACAI,aAAAF,IAAA;MACA;MACA,KAAAf,IAAA,CAAAE,OAAA,GAAAa,IAAA;IACA;IACAG,WAAA;MACA;MACAC,OAAA,CAAAC,GAAA,cAAApB,IAAA;MACA;MACA,KAAAA,IAAA;QACAC,OAAA;QACAC,OAAA;QACAC,KAAA;QACAC,IAAA;QACAC,SAAA;QACAC,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}